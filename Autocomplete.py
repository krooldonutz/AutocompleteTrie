# The TrieNode class is a data structure used for implementing a trie, which is a tree-like data
# structure used for efficient string searching.
class TrieNode:
    def __init__(self,char = None):
        """
        This is the initialization function for a Trie node, which sets up its children, terminal
        status, character, and word attributes if its terminal.
        
        :param char: The character associated with the current node in a trie data structure. It is an
        optional parameter that defaults to None if not provided
        """
        self.children = [None] * 27
        self.terminal = False
        self.char = char
        self.word = ""
        pass
# # The CatsTrie class structure
class CatsTrie:
    def __init__(self, sentences):
        """
        This function initializes a Trie data structure with a root node and inserts a list of sentences
        into the Trie.
        
        :param sentences: The `sentences` parameter is a list of strings that will be used to build a
        Trie data structure. The `__init__` method initializes the Trie by creating a root node and
        setting the current node to the root. It then inserts each sentence in the list into the Trie by
        calling the

        Time complexity: O(N M ) where n is the length of the sentences list and M is the number of characters in the longest sentence.
        """
        self.root = TrieNode("root")
        self.current = self.root
        self.sentences = sentences
        for i in sentences:
            self.insert(i)
    
    def insert(self, word):
        """
        This function inserts a word into a Trie data structure.
        
        :param word: The word to be inserted into the Trie data structure

        Time Complexity: O(n) where n is the length of the word being inserted to the Trie
        """
        root = self.root
        for i in range(len(word)):
            index = ord(word[i]) -96
            if root.children[index] == None:
                root.children[index] = TrieNode(word[i])
            root = root.children[index]
        root.word = word
        root.terminal = True
    
    
    def autoComplete(self, word, node = None):
        """
        This function takes a word and a node and returns the most frequent string that can be formed by
        traversing the trie from the given node with the given word as a prefix.

        Approach Description:
        In this function we traverse through the Trie until the end of the prefix. Then we get all the potential 
        word that can be returned under the current node of the end of the prefix. After we get all the potential
        words, we pick the one with the most appearance in the trie
        
        :param word: The word that the user has typed in and wants to autocomplete
        :param node: The node parameter is a reference to the current node in the trie data structure.
        It is used to traverse the trie and find the nodes that correspond to the characters in the
        input word. If the node parameter is not provided, the function uses the current node of the
        trie object
        :return: the most frequent string from the list of possible completions generated by the
        `autoCompleteAux` function.

        Time Complexity:
        O(X + Y ) where X is the length of the prompt and Y is the length of the length of the most frequent string
        """
        
        if node == None:
            node = self.current
        if len(word) > 0:
            for char in word:
                i = ord(char) - 97 + 1
                node = node.children[i]
                if node == None:
                    return None
        if node.terminal:
            return word
        curr = node
        output = self.autoCompleteAux(curr)
        return self.find_most_common(output, self.sentences)
    
    def autoCompleteAux(self, node, output = None):
        """
        This is a recursive function that traverses a trie data structure and returns a list of all
        words that can be formed from the given node.
        
        :param node: The current node being traversed in a trie data structure
        :param output: `output` is a list that stores the words that are found during the autocomplete
        process. It is initially set to `None` and is created as an empty list within the function if it
        is not provided as an argument. The function appends words to this list as it traverses the trie
        :return: a list of words that can be auto-completed based on the given node. The list contains
        all the words that are present in the trie tree starting from the given node.
        Time Complexity:
        O(X + Y ) where X is the length of the prompt and Y is the length of the length of the most frequent string
        """
        if output is None:
            output = []
        curr = node
        for i in curr.children:
            if i is None:
                continue
            if i.terminal == True:
                output.append(i.word)
            elif i.terminal == False:   
                output.extend(self.autoCompleteAux(i))    
        return output


    def find_most_common(self, list1, list2):
        """
        This function takes two list of strings and returns the most frequently occurring string in the first list.
        
        :param lst: a list of strings
        :param lst: a list of strings
        :return: the most frequent string in the first input list `lst`. 

        Time complexity =  O(n^2), where n is the length of the second input list
        """
        max_count = 0
        most_common = None

        for item in list1:
            count = 0
            for repo_item in list2:
                if item == repo_item:
                    count += 1
            if count > max_count:
                max_count = count
                most_common = item
        return most_common
    
